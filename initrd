#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Last updated 2017/04/23
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/sbin:/bin:/system/bin:/system/xbin; export PATH

# configure debugging output

LOG=/dev/null
test -e "$LOG" || busybox mknod $LOG c 1 3
exec 2>> $LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc and /sys
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	# let busybox install all applets as symlinks
	busybox --install -s
	# initialise /dev (first time)
	mkdir -p /dev/block
	echo /sbin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

error()
{
	echo $*
	return 1
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		RW="nolock,$RW"
	fi
	# FIXME: any way to mount ntfs gracefully?
	mount -o $RW,noatime $@ || mount.ntfs-3g -o rw,force $@
}

check_mount()
{
	if [ "`dirname $1`" = "/dev" ]; then
		[ -e $1 ] || return 1
		blk=`basename $1`
		[ ! -e /dev/block/$blk ] && ln $1 /dev/block
		dev=/dev/block/$blk
	else
		dev=$1
	fi
	#dev=$1
	dir=/mnt/dev$dev_index
	
	if [ ! -d $dir ]; then
		mkdir $dir
	fi
	
	try_mount ro $dev $dir || return 1
	echo "ls $dir"
	echo `ls $dir -l`
	sleep 6
	blank=1
	if [ -n "$iso" -a -e $dir/$iso ]; then
		mkdir /iso
		mount --move $dir /iso
		mkdir $dir/iso
		mount -o loop /iso/$iso $dir/iso
		SRC=iso
	fi
	
	#check system.sfs/system.img
	if [ -e $dir/$SRC/system.sfs ]; then
		[ $blank != 0 ] && blank=0
		mkdir /sfs
		mount -o loop,noatime $dir/$SRC/system.sfs /sfs
		mount_label /sfs/system.img system
	elif [ -e $dir/$SRC/system.img ]; then
		[ $blank != 0 ] && blank=0 && remount_rw
		mount_label $dir/$SRC/system.img system
	elif [ -d $dir/$SRC/system ]; then
		[ $blank != 0 ] && blank=0 && remount_rw
		mountpoint -q system || mount --bind $dir/$SRC/system system
	elif [ -e $dir/build.prop ]; then
		[ $blank != 0 ] && blank=0
		mountpoint -q system || mount --bind $dir system
	fi
	
	#check userdata.img
	if [ -e $dir/$SRC/$DATA ]; then
		[ $blank != 0 ] && blank=0 && remount_rw
		mount_label $dir/$SRC/$DATA data
	fi
	
	#check cache.img
	if [ -e $dir/$SRC/$CACHE ]; then
		[ $blank != 0 ] && blank=0 && remount_rw
		mount_label $dir/$SRC/$CACHE cache
	fi
	
	#check sdcard.img
	if [ -e $dir/$SRC/$SDCARD ]; then
		[ $blank != 0 ] && blank=0 && remount_rw
		mount_label $dir/$SRC/$SDCARD sdcard
	fi
	
	if [ $blank != 0 ]; then
		umount $dir
		#check initrd.img
		if [ -e $dir/$SRC/initrd.img ]; then
			mount_label $dev sdcard
		fi

	else
		dev_index=$((dev_index+1))
	fi
	echo " found at $1"
	rm /sbin/mke2fs
	hash -r
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo $dir
	#echo "$? ls $dir"
	#echo `ls $dir -l`
}

#usage: mount_label dev label
mount_label()
{
	mountpoint -q $2 && echo "$2 has been mounted" && return
	if [ ! -e $2 ]
	then
		mkdir $2
	fi
	mount -o loop,noatime $1 $2
	echo "mount -o loop,noatime $1 $2 : $?"
	sleep 10
}

debug_shell()
{
	if [ -x system/bin/sh ]; then
		echo Running MirBSD Korn Shell...
		USER="($1)" system/bin/sh -l 2>&1
	else
		echo Running busybox ash...
		sh 2>&1
	fi
}

echo -n Detecting Android-x86...

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`
#[ -z "$RAMDISK" ] && RAMDISK=ramdisk.img
[ -z "$DATA" ] && DATA=userdata.img 
[ -z "$CACHE" ] && CACHE=cache.img
[ -z "$SDCARD" ] && SDCARD=sdcard.img


for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			eval `echo $c | cut -b1-3,18-`
			;;
		*)
			;;
	esac
done

mkdir /mnt

#dev_index: mountpoint index under /mnt
dev_index=0

#search block devices
echo "..."
blkid > tmp
while read line
do
	#$line is like "/dev/sda: LABEL=labek UUID=uuid TYPE=type"
	dev=${line%%:*}
	label=`expr "$line" : '.*LABEL="\([^"]*\)"'`

	case $label in
		system)
			#this is a device consist of system.img, mount it to system
			mount_label $dev system
			;;
		data)
			#this is a device consist of userdata.img, mount it to data
			mount_label $dev data
			;;
		cache)
			#this is a device consist of cache.img, mount it to cache
			mount_label $dev sdcard
			;;
		sdcard)
			#this is a device consist of sdcard.img, mount it to sdcard
			mount_label $dev sdcard
			;;
		*)
			#this is a unknown device, there are many cases
			#1) system.sfs/system.img [data.img] [cache.img] [sdcard.img] others
			#2) sdcard.img
			check_mount $dev
			;;
	esac
done < tmp

rm tmp


ln -s mnt/dev$dev_index/$SRC /src
ln -s android/system /
ln -s ../system/lib/firmware ../system/lib/modules /lib

if [ -x system/bin/ln -a \( -n "$DEBUG" -o -n "$BUSYBOX" \) ]; then
	mv /bin /lib .
	sed -i 's|\( PATH.*\)|\1:/bin|' init.environ.rc
	rm /sbin/modprobe
	busybox mv /sbin/* sbin
	rmdir /sbin
	ln -s android/bin android/lib android/sbin /
	hash -r
fi

# load scripts
for s in `ls /scripts/* /src/scripts/*`; do
	test -e "$s" && source $s
done

# A target should provide its detect_hardware function.
# On success, return 0 with the following values set.
# return 1 if it wants to use auto_detect
[ "$AUTO" != "1" ] && detect_hardware && FOUND=1


load_modules
#mount_data
mountpoint -q data || mount -t tmpfs tmpfs data
#mount_sdcard
mountpoint -q sdcard || mount -t tmpfs tmpfs sdcard
setup_tslib
setup_dpi
post_detect

[ "$SETUPWIZARD" != "1" ] && echo "ro.setupwizard.mode=DISABLED" >> default.prop

# We must disable mdev before switching to Android
# since it conflicts with Android's init
echo > /proc/sys/kernel/hotplug

export ANDROID_ROOT=/system

echo "ls /system"
echo `ls /system`
echo "ls /data"
echo `ls /data`
echo "ls /cache"
echo `ls /cache`
echo "ls /sdcard"
echo `ls sdcard`
sleep 10

chmod a+rw /dev/tty
/init

# avoid kernel panic
while :; do
	echo
	echo '	Android-x86 console shell. Use only in emergencies.'
	echo
	debug_shell fatal-err
done

